<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddNewProductToRecipe" xml:space="preserve">
    <value>has been successfully added to the recipe and database.</value>
  </data>
  <data name="AddNextProductOrExit" xml:space="preserve">
    <value>If you want to add another product press Y, if you want to find the recipe press N.</value>
  </data>
  <data name="AddProductForSearch" xml:space="preserve">
    <value>is added for the search.</value>
  </data>
  <data name="AddProductToRecipe" xml:space="preserve">
    <value>has been successfully added to the recipe.</value>
  </data>
  <data name="AddTheNextProductOrExit" xml:space="preserve">
    <value>If you want to add another product press Y, if you want to stop adding products press N.</value>
  </data>
  <data name="ASKCreateNewProduct" xml:space="preserve">
    <value>Create new product?</value>
  </data>
  <data name="ChooseProductForRecipe" xml:space="preserve">
    <value>Choose the product which you want to add to the recipe:</value>
  </data>
  <data name="ChooseRecipe" xml:space="preserve">
    <value>Choose the recipe</value>
  </data>
  <data name="ChooseUnitsForProduct" xml:space="preserve">
    <value>Choose units of measurement for this product.</value>
  </data>
  <data name="CountOfProductNeaded" xml:space="preserve">
    <value>Enter the required amount of this product. Units: </value>
  </data>
  <data name="Enjoy your meal" xml:space="preserve">
    <value>Enjoy your meal!</value>
  </data>
  <data name="Enter product name" xml:space="preserve">
    <value>Enter product name (or part of name):</value>
  </data>
  <data name="Enter recipe name" xml:space="preserve">
    <value>Enter recipe name (or part of name):</value>
  </data>
  <data name="EnterNameofNewProduct" xml:space="preserve">
    <value>Enter the name of new product:</value>
  </data>
  <data name="EnterNameofNewRecipe" xml:space="preserve">
    <value>Enter the name of new recipe</value>
  </data>
  <data name="EnterProductName" xml:space="preserve">
    <value>Enter the name of product</value>
  </data>
  <data name="EnterRecipeDescription" xml:space="preserve">
    <value>Enter the description of the recipe.</value>
  </data>
  <data name="EnterYorN" xml:space="preserve">
    <value>Enter Y or N</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="Finded Recipes Count" xml:space="preserve">
    <value>Found recipes count: </value>
  </data>
  <data name="FirstMainMenuItem" xml:space="preserve">
    <value>Find recipe</value>
  </data>
  <data name="FirstSecondaryMenuItem" xml:space="preserve">
    <value>Find recipe by name</value>
  </data>
  <data name="Found Products Count" xml:space="preserve">
    <value>Found products count:</value>
  </data>
  <data name="FoundRecipeCount" xml:space="preserve">
    <value>Recipes with this products:</value>
  </data>
  <data name="GoBack" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Gram" xml:space="preserve">
    <value>Gram</value>
  </data>
  <data name="Grams" xml:space="preserve">
    <value>Grams</value>
  </data>
  <data name="Hello" xml:space="preserve">
    <value>Welcome to RecipeBook 2022!</value>
  </data>
  <data name="IncorrectMenuChoise" xml:space="preserve">
    <value>Choose corect menu item</value>
  </data>
  <data name="Item" xml:space="preserve">
    <value>Item</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Items</value>
  </data>
  <data name="Kilogram" xml:space="preserve">
    <value>Kilogram</value>
  </data>
  <data name="Kilograms" xml:space="preserve">
    <value>Kilograms</value>
  </data>
  <data name="Liter" xml:space="preserve">
    <value>Liter</value>
  </data>
  <data name="Litres" xml:space="preserve">
    <value>Litres</value>
  </data>
  <data name="MainMenuHeader" xml:space="preserve">
    <value>Main menu:</value>
  </data>
  <data name="Milliliter" xml:space="preserve">
    <value>Milliliter</value>
  </data>
  <data name="Milliliters" xml:space="preserve">
    <value>Milliliters</value>
  </data>
  <data name="More Precise name is required" xml:space="preserve">
    <value>More precise name is required.</value>
  </data>
  <data name="NewProduct" xml:space="preserve">
    <value>Create new product</value>
  </data>
  <data name="PerTaste" xml:space="preserve">
    <value>Per taste</value>
  </data>
  <data name="ProductAlreadyAddedToSearch" xml:space="preserve">
    <value> has already been added to recipe. Add another product. </value>
  </data>
  <data name="ProductAlreadyExist" xml:space="preserve">
    <value>This product is already exist.</value>
  </data>
  <data name="ProductExist" xml:space="preserve">
    <value>This product is already exists</value>
  </data>
  <data name="ProductIsNotExist" xml:space="preserve">
    <value>This product does not exist</value>
  </data>
  <data name="RecipeWasAddedtoDB" xml:space="preserve">
    <value>Your recipe was successfully created and added to database.</value>
  </data>
  <data name="SecondMainMenuItem" xml:space="preserve">
    <value>Add new recipe</value>
  </data>
  <data name="SecondMenuHeader" xml:space="preserve">
    <value>You chose find recipe</value>
  </data>
  <data name="SecondSecondaryMenuItem" xml:space="preserve">
    <value>Find recipe by product</value>
  </data>
  <data name="SuchRecipeNotExist" xml:space="preserve">
    <value>Recipe with combination of such products does not exist in app:</value>
  </data>
  <data name="Tablespoon" xml:space="preserve">
    <value>Tablespoon</value>
  </data>
  <data name="Tablespoons" xml:space="preserve">
    <value>Tablespoons</value>
  </data>
  <data name="TryAgain" xml:space="preserve">
    <value>Try again.</value>
  </data>
</root>